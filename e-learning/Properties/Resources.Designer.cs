//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace e_learning.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("e_learning.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1;XML;0
        ///1;JavaConfig;0
        ///1;Аннотации;1
        ///1;JSON;0
        ///2;GenerationType.AUTOINCREMENT;0
        ///2;GenerationType.INDEX;0
        ///2;GenerationType.iDENTITY;0
        ///2;GenerationType.SEQUENCE;1
        ///3;validate;1
        ///3;Correct;0
        ///3;Pattern;0
        ///3;Validator;0
        ///4;Создается класс для конфигурации с аннотацией @Configuration;1
        ///4;Создается класс для конфигурации;0
        ///4;Создается класс для конфигурации с аннотацией @Bean;0
        ///4;Все параметры конфигурации указываются в ключах запуска приложения;0
        ///5;Factory Pattern;0
        ///5;Dependency Injection;1
        ///5;Service [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string answer {
            get {
                return ResourceManager.GetString("answer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1;Каждый день щелкаю такие увлекательные тесты, как орешки;0
        ///1;Да, надеюсь и последний;1
        ///1;Я вообще не знаю, как сюда попал;0
        ///2;Безусловно, на него должны ровняться будущие поколения;0
        ///2;Ему только такие тесты и составлять;1
        ///2;Он зарекомендовал себя, как сомнительная личность;0
        ///3;Очень, хочу еще больше новых и интересных вопросов;0
        ///3;Что это вообще было?;1
        ///3;Скорее нет, чем да;0.
        /// </summary>
        public static string answers {
            get {
                return ResourceManager.GetString("answers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Разработчик данного учебно-методического комплекса студент факультета Компьютерных технологий и прикладной математике Кубанского государственного университета, 309 группы Романюта Дмитрий..
        /// </summary>
        public static string author {
            get {
                return ResourceManager.GetString("author", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Назовите основные принципы фреймворка Spring.
        ///2. Что нужно для запуска приложения Spring?
        ///3. Какие основные компоненты контекста Spring?
        ///4. В чем отличии простых старых классов Java от обычных?
        ///5. Назовите основные классы Spring.
        ///.
        /// </summary>
        public static string control1 {
            get {
                return ResourceManager.GetString("control1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Для чего необходима Spring boot CLI и какие задачи решает?
        ///2. Какие сервера по умолчанию использует приложение на Spring Boot?
        ///3. Какие компоненты необходимы для создание приложения на Spring Boot?
        ///4. Основные зависимости для работы приложения Spring Boot
        ///5. Плагины для упрощения работы с Spring Boot.
        ///.
        /// </summary>
        public static string control2 {
            get {
                return ResourceManager.GetString("control2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Назовите необходимые web-модули для создания приложения и кратко их опишите.
        ///2. Основные аннотации для работы с web-модулями.
        ///3. Основные возможности автоконфигурации Spring Boot.
        ///4. Принцип работы сервлетов в Spring boot.
        ///5. Шаблонизаторы для работы с Spring Boot.
        ///.
        /// </summary>
        public static string control3 {
            get {
                return ResourceManager.GetString("control3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Основные возможности Spring Data.
        ///2. Назовите и опишите классы и методы для работь с Spring JDBC.
        ///3. Какие базы данных поддерживает Spring JDBC?
        ///4. Основные возможности Spring JPA.
        ///5. Основные положения спецификации JPA.
        ///.
        /// </summary>
        public static string control4 {
            get {
                return ResourceManager.GetString("control4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Фреймворки для тестирования которые предоставляет Spring Boot.
        ///2. Задачи интеграционного тестирования.
        ///3. Способы использования Applicationcontext при тестировании. 
        ///4. Основные аннотации для тестирования приложения на Spring Boot.
        ///5. Задачи модульного тестирования. 
        ///.
        /// </summary>
        public static string control5 {
            get {
                return ResourceManager.GetString("control5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 
        ///Чтобы разобраться в Spring Boot, необходимо изучить фреймворк; важно понимать не только на что он способен, но и то, каких принципов придерживается. Вот часть принципов фреймворка Spring.
        ///1. Возможность выбора на всех уровнях. Spring позволяет откладывать принятие проектных решений практически до самого конца. Например, можно менять поставщиков хранилищ в конфигурации без изменения кода. То же самое справедливо и относительно многих других вопросов инфраструктуры и интеграции со сторонними API. Как вам п [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec1 {
            get {
                return ResourceManager.GetString("lec1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на JPA (Java Persistence API, API постоянного хранения объектовJava) обеспечивает модель персистентности POJО для объектно-реляционных отображений. Spring Data JPA позволяет хранить данные на основе этой модели.
        ///Реализация доступа к данным может оказаться непростой задачей, ведь приходится иметь дело с соединениями, сеансами, обработкой исключений и другими вещами, даже в случае простых операций CRUD. Именно поэтому Spring Data JPA предоставляет дополнительный уровень функциональности: создание реализаций реп [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec10 {
            get {
                return ResourceManager.GetString("lec10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Одна из основных идей фреймворка Spring — поощрение создания разработчиками простых и слабо связанных классов, программирование интерфейсов, благодаря чему программное обеспечение становится более надежным и лучше расширяемым. Фреймворк Spring предоставляет инструменты, упрощающие модульное и интеграционное тестирование (на самом деле, если вы действительно программируете интерфейсы, для тестирования функциональности приложений Spring вам не нужен). Другими словами, необходимо, чтобы приложение можно было п [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec11 {
            get {
                return ResourceManager.GetString("lec11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Spring упрощает создание корпоративных приложений Java, поскольку предоставляет все необходимое разработчику для использования языкаJava в корпоративной среде. В качестве альтернативных Java-языков на JVM (виртуальной машине Java) он полностью поддерживает Groovy и Kotlin. Spring Framework 5 Tpe6yeTjDK 8+ и обеспечивает поддержку пакета инструментов Java Development Kit (JDK) версий 9,10 и И. Разработчики Spring гарантируют ту же долгосрочную техническую поддержку версий 11 и 17, что и команда создателей JD [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec2 {
            get {
                return ResourceManager.GetString("lec2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Можно сказать, что Spring Boot — следующий этап эволюции фреймворка Spring, но не поймите меня превратно: Spring Boot — вовсе не замена фреймворку Spring, поскольку Spring Boot и есть фреймворк Spring! Spring Boot можно рассматривать как новый способ простого и удобного создания приложений Spring.
        ///Spring Boot упрощает способ разработки, поскольку позволяет легко создавать готовые к промышленной эксплуатации приложения на основе Spring, которые можно просто «запустить». Вы скоро узнаете, что с помощью Sprin [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec3 {
            get {
                return ResourceManager.GetString("lec3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Spring Boot задает способ простого создания приложений Spring и модель программирования, следующую рекомендуемым практикам приложений Spring.
        ///Для создания приложения Spring необходимы следующие компоненты.
        ///1. Утилита сборки/управления зависимостями, например, Maven или Gradle (Spring Boot также поддерживает Ant и Ivy).
        ///2. Корректное управление зависимостями и соответствующие плагины в утилите сборки. При работе с Maven требуется тег &lt;parent/&gt; (конечно, существуют и другие способы настройки Spring Boot, н [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec4 {
            get {
                return ResourceManager.GetString("lec4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Для работы с веб-технологиями во фреймворке Spring предназначены модули spring-web, spring-webmvc, springwebflux и spring-websocket.
        ///Модуль spring-web включает основные возможности веб-интеграции, например, функциональность загрузки файлов по частям, инициализацию контейнера Spring (с помощью сервлет-прослушивателей) и класс контекста приложения, ориентированный на работу с Интернетом. Модуль springwebmvc (модуль веб-сервера) содержит реализации всех сервисов Spring MVC (Model — View — Controller, «Модель  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec5 {
            get {
                return ResourceManager.GetString("lec5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Можно легко создавать веб-приложения путем добавления зависимости spring-boot-starter-web в файл pom.xml или build.gradle. Такая зависимость обеспечивает все нужные JAR-файлы spring-web и некоторые дополнительные, например, tomcat-embed* и jackson (для JSON и XML). Это значит, что Spring Boot использует все возможности модулей Spring MVC и обеспечивает всю необходимую автоконфигурацию для создания нужной вебинфраструктуры, в частности настройки DispatcherServlet, предоставляет значения по умолчанию (если вы [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec6 {
            get {
                return ResourceManager.GetString("lec6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Чтобы лучше разобраться в работе Spring Boot с веб-приложениями и возможностями модулей Spring MVC, вам предстоит создать приложение ToDo, которое предоставляет REST API. Вот список требований:
        ///1. создайте модель предметной области ToDo со следующими полями и типами: id (строковое значение), description (строковое значение), completed (булево значение), created (дата и время), modified (дата и время);
        ///2.  создайте REST API, обеспечивающий основные действия CRUD (создание, чтение, обновление и удаление). И [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec7 {
            get {
                return ResourceManager.GetString("lec7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Команда разработчиков Spring Data создала несколько замечательных, ориентированных на работу с данными фреймворков, доступных сегодня для использования сообществом Java и Spring. Они ставили перед собой задачу обеспечить возможность в привычном и единообразном стиле программировать на Spring операции доступа к данным и полностью контролировать используемую «за кулисами» технологию их хранения.
        ///В проекте Spring Data сгруппированы несколько дополнительных библиотек и фреймворков по работе с данными, что упро [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec8 {
            get {
                return ResourceManager.GetString("lec8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на При использовании класса JdbcTemplate для воплощения простого способа взаимодействия с любыми СУБД достаточно реализовать интерфейсы обратного вызова. Для класса JdbcTemplate требуется интерфейс javax.sql.DataSource, его можно использовать в любом классе, просто объявив его в JavaConfig, XML или с помощью аннотаций. Класс JdbcTemplate берет на себя должную обработку всех исключений SQLException.
        ///Для указания поименованных параметров (:parameterName) вместо обычных JDBС-«заполнителей» &quot;?&quot; можно использовать [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lec9 {
            get {
                return ResourceManager.GetString("lec9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Основная литература
        ///1. Spring REST. Building Java microservices and cloud applications. Balaji Varanasi, Maxim Bartkov. 
        ///2. Spring. Все паттерны проектирования. Динеш Раджпут. Питер. 2019.
        ///3. Java в облаке. Spring Boot. Spring Cloud. Cloud Foundry. Джон Лонг, Кеннет Бастани. 
        ///4. Spring Boot 2. Лучшие практики для профессионалов. Фелипе 	Гутьеррес. 
        ///5. Spring в действии. Крейг Уоллс
        ///
        ///Интернет источники
        ///1. https://www.baeldung.com
        ///2. https://spring.io/guides
        ///3. https://docs.spring.io/spring-boot/doc [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string lib {
            get {
                return ResourceManager.GetString("lib", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp1 {
            get {
                object obj = ResourceManager.GetObject("pp1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp11 {
            get {
                object obj = ResourceManager.GetObject("pp11", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp2 {
            get {
                object obj = ResourceManager.GetObject("pp2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp3 {
            get {
                object obj = ResourceManager.GetObject("pp3", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp4 {
            get {
                object obj = ResourceManager.GetObject("pp4", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp5 {
            get {
                object obj = ResourceManager.GetObject("pp5", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp6 {
            get {
                object obj = ResourceManager.GetObject("pp6", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        public static byte[] pp8 {
            get {
                object obj = ResourceManager.GetObject("pp8", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Получить из списка тему предметной области и построить для нее схему БД..
        /// </summary>
        public static string practice1 {
            get {
                return ResourceManager.GetString("practice1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Добавляем CRUD RestControllers для всех сущностей + получение списков
        ///2. Добавить request &amp; response Dto для каждой сущности в БД
        ///3. Подключить сваггер v3 (SpringDoc, OpenAPI)
        ///4. Добавить обработчики исключений (@ExceptionHandler, @ControllerAdvice)
        ///.
        /// </summary>
        public static string practice2 {
            get {
                return ResourceManager.GetString("practice2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Подключить БД
        ///2. Подключить liquibase. Прописать changeSet’ы по созданию таблиц
        ///3. Прописать Entity-классы
        ///4. Прописать DAO и service слои на существующие методы контроллеров
        ///5. Реализовать кастомные Exception
        ///6. Реализовать mapper’ы для dto и entity
        ///7. Для всех методов списков (findAll) добавить простую пагинацию.
        ///.
        /// </summary>
        public static string practice3 {
            get {
                return ResourceManager.GetString("practice3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Реализовать новые эндпоинты для выполнения функций:
        ///- процесс выполнения задач (назначение исполнителя, релиза и др, смена статуса задачи)
        ///- завершение выполнения всего проекта
        ///- подсчет количества задач, не завершившиеся в заданный релиз
        ///2. Подключить логирование, прописывать логи на протяжении всего выполнения ТЗ
        ///.
        /// </summary>
        public static string practice4 {
            get {
                return ResourceManager.GetString("practice4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1;Какие типы конфигурации поддерживает Spring?
        ///2;Какие значения может принимать атрибут strategy у аннотации @GeneratedValue?
        ///3;Какая аннотация задает правило валидации данных из полей в сущности, связанной с БД?
        ///4;Как реализуется настройка приложения через JavaConfig?
        ///5;Какую реализацию IoC использует Spring
        ///6;Укажите arifactID родительского pom-файла при построении Spring Boot проекта
        ///7;Какой метод класса BindingResult позволяет получить результат валидации HTML-формы?
        ///8;Для каких типов связей межд [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string questions {
            get {
                return ResourceManager.GetString("questions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 1. Java 8 или новее.
        ///2. Любая IDE для работы с Java.
        ///3. Postgressql
        ///4. Maven 
        ///.
        /// </summary>
        public static string scr {
            get {
                return ResourceManager.GetString("scr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Теоритическая часть курса служит для ввода во фреймворк Spring. Разделы курса построены так, что учащийся будет постепенно переходить от основ фреймворка до более практичных знаний, которые потребуются при создании веб-приложений. В первом разделе изучается основные понятия фреймворка Spring. Во втором разделе изучается непосредственно сам Spring Boot и возможности с ним взаимодействовать. Третий раздел служит примером того как создавать веб-приложения на Spring Boot. В четвертом разделе уделено внимание вз [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string summary {
            get {
                return ResourceManager.GetString("summary", resourceCulture);
            }
        }
    }
}
