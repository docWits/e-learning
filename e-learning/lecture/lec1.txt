
Чтобы разобраться в Spring Boot, необходимо изучить фреймворк; важно понимать не только на что он способен, но и то, каких принципов придерживается. Вот часть принципов фреймворка Spring.
1. Возможность выбора на всех уровнях. Spring позволяет откладывать принятие проектных решений практически до самого конца. Например, можно менять поставщиков хранилищ в конфигурации без изменения кода. То же самое справедливо и относительно многих других вопросов инфраструктуры и интеграции со сторонними API. Как вам предстоит увидеть, это происходит даже на этапе развертывания приложения в облаке.
2. Приспособление к различным точкам зрения. Spring приветствует гибкость и не задает никаких жестких путей решения задач. Он поддерживает широкий диапазон потребностей приложений с различными подходами.
3. Обеспечение строгой обратной совместимости. Развитие Spring всегда старательно направлялось таким образом, чтобы минимизировать число изменений, нарушающих совместимость между версиями. Spring поддерживает тщательно подобранный диапазон версий JDK и сторонних библиотек, упрощая тем самым поддержку использующих его приложений и библиотек.
4. Забота об архитектуре API. Команда создателей Spring вложила немало труда и размышлений в создание интуитивно понятных API, которые смогут продержаться на протяжении множества версий и лет. 
5. Высокие стандарты качества исходного кода. Spring Framework делает особый акцент на выразительной, актуальной и точной автодокументации Qavadocs). Это один из очень немногих проектов, которые могут по праву заявить о чистой структуре кода без циклических зависимостей между пакетами.
Spring работает с простыми Java-объектами в старом стиле (Plain Old Java Objects, POJOs), что сильно упрощает расширение. Spring обеспечивает готовность приложений к промышленной эксплуатации; впрочем, ему нужно немного помочь, добавив конфигурацию, связывающую воедино все зависимости и внедряющую зависимости, необходимые для создания компонентов Spring и выполнения приложения (рис. 1).
