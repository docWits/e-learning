Можно легко создавать веб-приложения путем добавления зависимости spring-boot-starter-web в файл pom.xml или build.gradle. Такая зависимость обеспечивает все нужные JAR-файлы spring-web и некоторые дополнительные, например, tomcat-embed* и jackson (для JSON и XML). Это значит, что Spring Boot использует все возможности модулей Spring MVC и обеспечивает всю необходимую автоконфигурацию для создания нужной вебинфраструктуры, в частности настройки DispatcherServlet, предоставляет значения по умолчанию (если вы их не переопределите), настраивает встроенный сервер Tomcat (чтобы можно было запускать приложение без каких-либо контейнеров) и многое другое.
Автоконфигурация добавляет в веб-приложение следующие возможности.
1. Поддержка статического контента, то есть возможность добавления статического контента, например, HTML, JavaScript, CSS, мультимедийных элементов и т. д., в каталог /static (по умолчанию) или /public, /resources или /МЕТА-INF/resources, который должен находиться по пути к классам или в текущем каталоге. Spring Boot подхватывает их и выдает по запросу. Это поведение можно легко менять, модифицируя свойство spring. mvc. static - path-pattern или spring, resources, static-locations. Одна из замечательных возможностей Spring Boot относительно веб-приложений: если создать файл index.html, Spring Boot выдаст его автоматически без регистрации компонентов или потребности в дополнительной конфигурации.
2. Компонент HttpMessageConverters. При необходимости получить JSONответ в случае обычного приложения Spring MVC следует создать соответствующую конфигурацию (XML или JavaConfig) для компонента HttpMessageConverters. Spring Boot добавляет данную поддержку по умолчанию, так что этого делать не нужно; это значит, что форматJ SON выдается по умолчанию (благодаря библиотекам jackson, предоставляемым модулем spring-boot-starter-web в виде зависимостей). А если автоконфигурация Spring Boot обнаруживает XML-расширениеJackson по пути к классам, то агрегирует HttpMessageConverter для XML с прочими средствами преобразования, в результате чего приложение может выдать контент в формате application/j son или application/xml, в зависимости от заголовка content - type запроса.
3. Сериализаторы и десериализаторыJSON. Чтобы лучше управлять сериализацией/десериализацией в/из формата}5ОЫ, Spring Boot предоставляет возможность создания своих собственных сериализаторов/десериализаторов путем расширения типов JsonSerializer<T> и/или JsonDeserializer<T> и снабжения созданного класса аннотацией gJsonComponent, чтобы его можно было зарегистрировать для использования. Еще одна возможность Spring Boot — поддержка Jackson; по умолчанию Spring Boot сериализует поля дат в формате 2018-05-01T23:31:38.141+0000, но такое поведение по умолчанию можно поменять, изменив значение свойства spring, jackson.dateformat=yyyy-MM-dd (можно использовать любой паттерн формата даты); предыдущее значение приводит к генерации вывода вида 2018-05-01.
4. Сопоставление с путем и согласование контента. Одна из принятых практик работы приложений Spring MVC — способность реагировать на любой суффикс для представления типа контента ответа и согласования его контента. Например, в случае /api/todo. json или /api/todo. pdf content –type будет application/json и application/pdf; так что ответ будет в формате JSON или представлять собой PDF-файл соответственно. Другими словами, Spring MVC производит сопоставление с паттерном .* суффикса, например /api/todo.*. Spring Boot отключает такое поведение по умолчанию. При этом все равно можно применять для данной цели параметр, установив свойство spring.mvc.contentnegotiation.favor-parameter=true (по умолчанию false); так что можно использовать что-то вроде /api/ todo?format=xml (format — название этого параметра по умолчанию; конечно, его можно поменять, задав spring.mvc.contentnegotiation.parametername=myparam). В результате content-type становится application/xml.
5. Обработка ошибок. Spring Boot использует путь /error для создания страницы, на которой выводятся все глобальные ошибки. Такое поведение можно поменять, создав свои собственные пользовательские страницы для этой цели. Необходимо создать пользовательские HTML-страницы в каталоге src/main/resources/public/error/, например страницы 500.html или 404.html. В случае воплощающего REST приложения Spring Boot отвечает в форматеJSON. Spring Boot также поддерживает обработку ошибок с помощью Spring MVC при применении аннотаций @ControllerAdvice или @ExceptionHandler. Зарегистрировать пользовательские объекты ErrorPage можно путем реализации интерфейса ErrorPageRegistrar и объявления его как компонента Spring.
6. Поддержка шаблонизаторов. Spring Boot поддерживает FreeMarker, Groovy Templates, Thymeleaf и Mustache. При включении зависимости spring-boot-5ТагТег-<ша6лонизатор> необходима автоконфигурация Spring Boot для ее активации и добавления всех нужных средств разрешения представлений и обработчиков файлов. По умолчанию Spring Boot ищет их в каталоге src/ main/resources/templates/path.
