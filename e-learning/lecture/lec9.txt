При использовании класса JdbcTemplate для воплощения простого способа взаимодействия с любыми СУБД достаточно реализовать интерфейсы обратного вызова. Для класса JdbcTemplate требуется интерфейс javax.sql.DataSource, его можно использовать в любом классе, просто объявив его в JavaConfig, XML или с помощью аннотаций. Класс JdbcTemplate берет на себя должную обработку всех исключений SQLException.
Для указания поименованных параметров (:parameterName) вместо обычных JDBС-«заполнителей» "?" можно использовать класс NamedParameterJdbcTemplate JDBC-адаптер). Эта еще одна возможность, которую можно применять в своих SQL-запросах.
Класс JdbcTemplate предоставляет для использования различные методы.
1. Для выполнения запросов (select) обычно задействуются методы query, queryForObject.
2. Для обновления (INSERT/UPDATE/DELETE) используется метод update.
3. Для различных операций (над базой данных/таблицей/для функций) применяются методы execute и update.
Благодаря Spring JDBC можно вызывать хранимые процедуры с помощью класса SimpleJdbcCall и производить над результатом различные операции с помощью конкретного интерфейса RowMapper. Класс JdbcTemplate использует RowMapper<T> для построчного отображения (задания соответствий) строк ResultSet.
SpringJDBC поддерживает встроенные СУБД, например, HSQL, Н2 и Derby. Настройка очень проста, а запуск и тестирование не занимают много времени.
Еще одна возможность — инициализация баз данных с помощью скриптов; причем можно или использовать встроенную поддержку, или не использовать. Можно добавлять свои собственные схемы и данные в SQL-формате.
