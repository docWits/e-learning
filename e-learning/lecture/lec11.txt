Одна из основных идей фреймворка Spring — поощрение создания разработчиками простых и слабо связанных классов, программирование интерфейсов, благодаря чему программное обеспечение становится более надежным и лучше расширяемым. Фреймворк Spring предоставляет инструменты, упрощающие модульное и интеграционное тестирование (на самом деле, если вы действительно программируете интерфейсы, для тестирования функциональности приложений Spring вам не нужен). Другими словами, необходимо, чтобы приложение можно было протестировать с помощью систем тестирования JUnit или TestNG на основе объектов (создаваемых просто с помощью оператора new — без Spring или какого-либо другого контейнера).
В фреймворк Spring включено несколько пакетов, предназначенных для модульного или интеграционного тестирования приложений. Для модульного тестирования предназначено несколько имитационных объектов (Environment, Propertysource, INDI, Servlet; реактивные утилиты тестирования ServerHttpRequest и ServerHttpResponse), с помощью которых можно производить изоляционное тестирование кода.
Одна из чаще всего используемых возможностей тестирования в фреймворке Spring — интеграционное тестирование. Основные его задачи:
1. управление кэшированием контейнера Spring 1оС в промежутке между выполнениями тестов;
2. управление транзакциями;
3. внедрение зависимостей экземпляров тестовых объектов;
4. создание предназначенных специально для Spring базовых классов.
Фреймворк Spring обеспечивает легкий способ тестирования посредством интеграции в тесты контекста приложения (Applicationcontext). Модуль тестирования Spring предлагает несколько способов использования Applicationcontext, программным образом и с помощью аннотаций.
1. Аннотация BootstrapWith. Аннотация уровня класса, предназначенная для конфигурации начальной загрузки фреймворка Testcontext Spring.
2. Аннотация gContextConfiguration. Определяет метаданные уровня класса, задающие способ загрузки и настройки Applicationcontext для интеграционных тестов. Это совершенно необходимая для ваших классов аннотация, поскольку именно здесь Applicationcontext загружает все определения компонентов.
3. Аннотация @WebAppConfiguration. Аннотация уровня класса, указывающая, что загружаемым для интеграционного теста контекстом приложения должно быть WebApplicationContext.
4. Аннотация @ActiveProfile. Аннотация уровня класса, указывающая, какой из профилей определения компонентов должен быть активным при загрузке Applicationcontext для интеграционного теста.
5. Аннотация @TestPropertySource. Аннотация уровня класса, предназначенная для задания местоположений файлов свойств и встраиваемых свойств, добавляемых в набор объектов Propertysource в Environment для загружаемого для интеграционного теста Applicationcontext.
6. Аннотация @DirtiesContext. Указывает, что используемый Applicationcontext был «загрязнен» во время выполнения теста (например, модифицирован или поврежден путем изменения состояния компонента-одиночки) и должен быть закрыт.
